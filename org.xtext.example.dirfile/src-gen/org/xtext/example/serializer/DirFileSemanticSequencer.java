/*
 * generated by Xtext 2.15.0
 */
package org.xtext.example.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.dirFile.DirFilePackage;
import org.xtext.example.dirFile.Directory;
import org.xtext.example.dirFile.File;
import org.xtext.example.dirFile.FirstDirectory;
import org.xtext.example.services.DirFileGrammarAccess;

@SuppressWarnings("all")
public class DirFileSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DirFileGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DirFilePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DirFilePackage.DIRECTORY:
				sequence_Directory(context, (Directory) semanticObject); 
				return; 
			case DirFilePackage.FILE:
				sequence_File(context, (File) semanticObject); 
				return; 
			case DirFilePackage.FIRST_DIRECTORY:
				sequence_FirstDirectory(context, (FirstDirectory) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Directory returns Directory
	 *     TYPE_DIR_FILE returns Directory
	 *
	 * Constraint:
	 *     (name=STRING tree+=TYPE_DIR_FILE*)
	 */
	protected void sequence_Directory(ISerializationContext context, Directory semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     File returns File
	 *     TYPE_DIR_FILE returns File
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_File(ISerializationContext context, File semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DirFilePackage.Literals.TYPE_DIR_FILE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DirFilePackage.Literals.TYPE_DIR_FILE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFileAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FirstDirectory returns FirstDirectory
	 *
	 * Constraint:
	 *     firstDirectory=Directory
	 */
	protected void sequence_FirstDirectory(ISerializationContext context, FirstDirectory semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DirFilePackage.Literals.FIRST_DIRECTORY__FIRST_DIRECTORY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DirFilePackage.Literals.FIRST_DIRECTORY__FIRST_DIRECTORY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFirstDirectoryAccess().getFirstDirectoryDirectoryParserRuleCall_0(), semanticObject.getFirstDirectory());
		feeder.finish();
	}
	
	
}
