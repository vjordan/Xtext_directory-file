/*
 * generated by Xtext 2.15.0
 */
package org.xtext.example.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.dirFile.Directory
import org.xtext.example.dirFile.File
import org.xtext.example.dirFile.FirstDirectory

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DirFileGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))

		for(t: resource.allContents.toIterable.filter(FirstDirectory)){
			fsa.generateFile("Main.java",t.compile);
		}
	}
	
	def compile(FirstDirectory fd) '''
	
		import java.io.File;

			public class Main {
			
				public static void main(String[] args){
					System.out.println("Test");
					File directory;
					File file;
					directory = new File("«fd.firstDirectory.name»");
					«fd.compile()»
			  }
			}
	'''
	
	def compile(Directory d) '''
		System.out.println("Directory");
		«FOR tree : d.tree»
			«IF tree instanceof File»
				«compile(tree)»
			«ELSE»
				file=new File("«d.name»" + File.separator + "«tree.name»");
				file.mkdir();
				«compile(d)»
			«ENDIF»
		«ENDFOR»
	'''
	
	def compile(File f) '''
		System.out.println("File");
		file = new File(directory.getPath() + File.separator + "«f.name»");
		file.createNewFile();
	'''
}
