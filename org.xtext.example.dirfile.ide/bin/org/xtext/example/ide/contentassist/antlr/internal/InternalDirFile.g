/*
 * generated by Xtext 2.15.0
 */
grammar InternalDirFile;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.services.DirFileGrammarAccess;

}
@parser::members {
	private DirFileGrammarAccess grammarAccess;

	public void setGrammarAccess(DirFileGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleDirectory
entryRuleDirectory
:
{ before(grammarAccess.getDirectoryRule()); }
	 ruleDirectory
{ after(grammarAccess.getDirectoryRule()); } 
	 EOF 
;

// Rule Directory
ruleDirectory 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDirectoryAccess().getGroup()); }
		(rule__Directory__Group__0)
		{ after(grammarAccess.getDirectoryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFile
entryRuleFile
:
{ before(grammarAccess.getFileRule()); }
	 ruleFile
{ after(grammarAccess.getFileRule()); } 
	 EOF 
;

// Rule File
ruleFile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFileAccess().getGroup()); }
		(rule__File__Group__0)
		{ after(grammarAccess.getFileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTYPE_DIR_FILE
entryRuleTYPE_DIR_FILE
:
{ before(grammarAccess.getTYPE_DIR_FILERule()); }
	 ruleTYPE_DIR_FILE
{ after(grammarAccess.getTYPE_DIR_FILERule()); } 
	 EOF 
;

// Rule TYPE_DIR_FILE
ruleTYPE_DIR_FILE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTYPE_DIR_FILEAccess().getAlternatives()); }
		(rule__TYPE_DIR_FILE__Alternatives)
		{ after(grammarAccess.getTYPE_DIR_FILEAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TYPE_DIR_FILE__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTYPE_DIR_FILEAccess().getDirectoryParserRuleCall_0()); }
		ruleDirectory
		{ after(grammarAccess.getTYPE_DIR_FILEAccess().getDirectoryParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTYPE_DIR_FILEAccess().getFileParserRuleCall_1()); }
		ruleFile
		{ after(grammarAccess.getTYPE_DIR_FILEAccess().getFileParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Directory__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Directory__Group__0__Impl
	rule__Directory__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Directory__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDirectoryAccess().getDirKeyword_0()); }
	'dir'
	{ after(grammarAccess.getDirectoryAccess().getDirKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Directory__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Directory__Group__1__Impl
	rule__Directory__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Directory__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDirectoryAccess().getNameAssignment_1()); }
	(rule__Directory__NameAssignment_1)
	{ after(grammarAccess.getDirectoryAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Directory__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Directory__Group__2__Impl
	rule__Directory__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Directory__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDirectoryAccess().getTreeAssignment_2()); }
	(rule__Directory__TreeAssignment_2)*
	{ after(grammarAccess.getDirectoryAccess().getTreeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Directory__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Directory__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Directory__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDirectoryAccess().getEnddirKeyword_3()); }
	'enddir'
	{ after(grammarAccess.getDirectoryAccess().getEnddirKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__File__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__File__Group__0__Impl
	rule__File__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFileAccess().getFileKeyword_0()); }
	'file'
	{ after(grammarAccess.getFileAccess().getFileKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__File__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFileAccess().getNameAssignment_1()); }
	(rule__File__NameAssignment_1)
	{ after(grammarAccess.getFileAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Directory__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectoryAccess().getNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getDirectoryAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Directory__TreeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDirectoryAccess().getTreeTYPE_DIR_FILEParserRuleCall_2_0()); }
		ruleTYPE_DIR_FILE
		{ after(grammarAccess.getDirectoryAccess().getTreeTYPE_DIR_FILEParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__File__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFileAccess().getNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getFileAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
